// Gemini AI Client for Content Extraction
class GeminiClient {
    constructor() {
        this.apiKey = null;
        this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models';
        this.model = 'gemini-2.5-flash';
    }

    async initialize() {
        try {
            // Get API key from Chrome storage
            this.apiKey = await this.getStoredApiKey();
            return !!this.apiKey;
        } catch (error) {
            console.error('Failed to initialize Gemini client:', error);
            return false;
        }
    }

    async getStoredApiKey() {
        return new Promise((resolve) => {
            chrome.storage.sync.get(['geminiApiKey'], (result) => {
                resolve(result.geminiApiKey || null);
            });
        });
    }

    async extractContentFromHTML(htmlContent, options = {}) {
        if (!this.apiKey) {
            throw new Error('Gemini API key not configured. Please add your API key in settings.');
        }

        const prompt = `Please extract all of the content from the following html:

${htmlContent}

Extract the readable content and maintain content structure and links as much as possible.`;

        const systemInstruction = `When you are given an HTML page of content, your task is to extract ALL of the readable content from the page. Retain page structure by properly using Headings, bullets, lists, tables and other structural elements, exactly as they appear on the page to the reader. Retain all links and relevant items in context. Do not include content from the top navigation or menu, sidebar, ads, footer or other content that is not part of the main page of content.`;

        const requestBody = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            systemInstruction: {
                parts: [
                    {
                        text: systemInstruction
                    }
                ]
            },
            generationConfig: {
                thinkingConfig: {
                    thinkingBudget: 0
                }
            }
        };

        try {
            const response = await fetch(`${this.baseUrl}/${this.model}:generateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Gemini API error (${response.status}): ${errorText}`);
            }

            const result = await response.json();
            
            // Extract the generated text from the response
            if (result.candidates && result.candidates.length > 0) {
                const candidate = result.candidates[0];
                if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                    return candidate.content.parts[0].text;
                }
            }

            throw new Error('No content generated by Gemini API');

        } catch (error) {
            console.error('Gemini API request failed:', error);
            throw error;
        }
    }

    async extractContentFromHTMLStream(htmlContent, options = {}) {
        if (!this.apiKey) {
            throw new Error('Gemini API key not configured. Please add your API key in settings.');
        }

        const prompt = `Please extract all of the content from the following html:

${htmlContent}

Extract the readable content and maintain content structure and links as much as possible.`;

        const systemInstruction = `When you are given an HTML page of content, your task is to extract ALL of the readable content from the page. Retain page structure by properly using Headings, bullets, lists, tables and other structural elements, exactly as they appear on the page to the reader. Retain all links and relevant items in context. Do not include content from the top navigation or menu, sidebar, ads, footer or other content that is not part of the main page of content.`;

        const requestBody = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            systemInstruction: {
                parts: [
                    {
                        text: systemInstruction
                    }
                ]
            },
            generationConfig: {
                thinkingConfig: {
                    thinkingBudget: 0
                }
            }
        };

        try {
            const response = await fetch(`${this.baseUrl}/${this.model}:streamGenerateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Gemini API error (${response.status}): ${errorText}`);
            }

            // Handle streaming response
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let fullText = '';

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');

                for (const line of lines) {
                    if (line.trim() && !line.startsWith('data: ')) continue;
                    
                    const jsonStr = line.replace('data: ', '').trim();
                    if (!jsonStr) continue;

                    try {
                        const data = JSON.parse(jsonStr);
                        if (data.candidates && data.candidates.length > 0) {
                            const candidate = data.candidates[0];
                            if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                                fullText += candidate.content.parts[0].text || '';
                            }
                        }
                    } catch (parseError) {
                        // Skip invalid JSON chunks
                        continue;
                    }
                }
            }

            if (!fullText) {
                throw new Error('No content generated by Gemini API');
            }

            return fullText;

        } catch (error) {
            console.error('Gemini API stream request failed:', error);
            throw error;
        }
    }

    async summarizeContentFromHTML(htmlContent, options = {}) {
        if (!this.apiKey) {
            throw new Error('Gemini API key not configured. Please add your API key in settings.');
        }

        const prompt = `Please provide a comprehensive summary of the following HTML content:

${htmlContent}

Focus on the main content and provide a thorough overview that captures all key information and insights.`;

        const systemInstructionSummarize = `When you are given an HTML page of content, your task is to provide a comprehensive summary that captures all the key information and insights from the page. Your summary should:

1. **Extract all essential content**: Include all important facts, data, arguments, conclusions, and actionable information from the main content area. Do not include content from navigation menus, sidebars, ads, footers, or other non-essential page elements.

2. **Preserve information hierarchy**: Maintain the logical flow and structure of information as presented on the page. Use headings, subheadings, and clear organization to reflect the original content structure.

3. **Retain critical details**: Include specific numbers, dates, names, locations, statistics, quotes, and other concrete details that are essential to understanding the content. Don't generalize away important specifics.

4. **Summarize comprehensively, not just highlight**: Provide a thorough overview that someone could read instead of the original page and still understand all the main points, supporting evidence, and context.

5. **Focus on readability**: Present the information in a clean, easy-to-read format without links, navigation elements, or other web page clutter that would distract from the core content.

6. **Capture the full scope**: Ensure your summary covers the entire breadth of the page's content, not just the opening sections or most prominent points.

Your goal is to create a summary that is significantly shorter than the original but contains all the information a reader would need to fully understand the page's content and key takeaways - essentially a quick read that gets all the important information without the fluff.`;

        const requestBody = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            systemInstruction: {
                parts: [
                    {
                        text: systemInstructionSummarize
                    }
                ]
            },
            generationConfig: {
                thinkingConfig: {
                    thinkingBudget: 0
                }
            }
        };

        try {
            const response = await fetch(`${this.baseUrl}/${this.model}:generateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Gemini API error (${response.status}): ${errorText}`);
            }

            const result = await response.json();
            
            // Extract the generated text from the response
            if (result.candidates && result.candidates.length > 0) {
                const candidate = result.candidates[0];
                if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                    return candidate.content.parts[0].text;
                }
            }

            throw new Error('No content generated by Gemini API');

        } catch (error) {
            console.error('Gemini API summarization request failed:', error);
            throw error;
        }
    }

    isConfigured() {
        return !!this.apiKey;
    }
}

// Make it available globally
window.GeminiClient = GeminiClient;
