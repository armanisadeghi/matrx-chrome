// Gemini AI Client for Content Extraction
class GeminiClient {
    constructor() {
        this.apiKey = null;
        this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models';
        this.model = 'gemini-2.5-flash';
    }

    async initialize() {
        try {
            // Get API key from Chrome storage
            this.apiKey = await this.getStoredApiKey();
            return !!this.apiKey;
        } catch (error) {
            console.error('Failed to initialize Gemini client:', error);
            return false;
        }
    }

    async getStoredApiKey() {
        return new Promise((resolve) => {
            chrome.storage.sync.get(['geminiApiKey'], (result) => {
                resolve(result.geminiApiKey || null);
            });
        });
    }

    async extractContentFromHTML(htmlContent, options = {}) {
        if (!this.apiKey) {
            throw new Error('Gemini API key not configured. Please add your API key in settings.');
        }

        const prompt = `Please extract all of the content from the following html:

${htmlContent}

Extract the readable content and maintain content structure and links as much as possible.`;

        const systemInstruction = `When you are given an HTML page of content, your task is to extract ALL of the readable content from the page. Retain page structure by properly using Headings, bullets, lists, tables and other structural elements, exactly as they appear on the page to the reader. Retain all links and relevant items in context. Do not include content from the top navigation or menu, sidebar, ads, footer or other content that is not part of the main page of content.`;

        const requestBody = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            systemInstruction: {
                parts: [
                    {
                        text: systemInstruction
                    }
                ]
            },
            generationConfig: {
                thinkingConfig: {
                    thinkingBudget: 0
                }
            }
        };

        try {
            const response = await fetch(`${this.baseUrl}/${this.model}:generateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Gemini API error (${response.status}): ${errorText}`);
            }

            const result = await response.json();
            
            // Extract the generated text from the response
            if (result.candidates && result.candidates.length > 0) {
                const candidate = result.candidates[0];
                if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                    return candidate.content.parts[0].text;
                }
            }

            throw new Error('No content generated by Gemini API');

        } catch (error) {
            console.error('Gemini API request failed:', error);
            throw error;
        }
    }

    async extractContentFromHTMLStream(htmlContent, options = {}) {
        if (!this.apiKey) {
            throw new Error('Gemini API key not configured. Please add your API key in settings.');
        }

        const prompt = `Please extract all of the content from the following html:

${htmlContent}

Extract the readable content and maintain content structure and links as much as possible.`;

        const systemInstruction = `When you are given an HTML page of content, your task is to extract ALL of the readable content from the page. Retain page structure by properly using Headings, bullets, lists, tables and other structural elements, exactly as they appear on the page to the reader. Retain all links and relevant items in context. Do not include content from the top navigation or menu, sidebar, ads, footer or other content that is not part of the main page of content.`;

        const requestBody = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            systemInstruction: {
                parts: [
                    {
                        text: systemInstruction
                    }
                ]
            },
            generationConfig: {
                thinkingConfig: {
                    thinkingBudget: 0
                }
            }
        };

        try {
            const response = await fetch(`${this.baseUrl}/${this.model}:streamGenerateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Gemini API error (${response.status}): ${errorText}`);
            }

            // Handle streaming response
            const reader = response.body.getReader();
            const decoder = new TextDecoder();
            let fullText = '';

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');

                for (const line of lines) {
                    if (line.trim() && !line.startsWith('data: ')) continue;
                    
                    const jsonStr = line.replace('data: ', '').trim();
                    if (!jsonStr) continue;

                    try {
                        const data = JSON.parse(jsonStr);
                        if (data.candidates && data.candidates.length > 0) {
                            const candidate = data.candidates[0];
                            if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                                fullText += candidate.content.parts[0].text || '';
                            }
                        }
                    } catch (parseError) {
                        // Skip invalid JSON chunks
                        continue;
                    }
                }
            }

            if (!fullText) {
                throw new Error('No content generated by Gemini API');
            }

            return fullText;

        } catch (error) {
            console.error('Gemini API stream request failed:', error);
            throw error;
        }
    }

    async summarizeContentFromHTML(htmlContent, options = {}) {
        if (!this.apiKey) {
            throw new Error('Gemini API key not configured. Please add your API key in settings.');
        }

        const prompt = `Please provide a comprehensive summary of the following HTML content:

${htmlContent}

Focus on the main content and provide a thorough overview that captures all key information and insights.`;

const systemInstructionSummarize = `When you are given an HTML page of content, your task is to provide a concise summary that captures the most important information and key insights. Your summary should:

1. **Focus on substance over structure**: Extract and present the core ideas, main arguments, key findings, and essential information. Ignore the page's header structure, navigation elements, sidebars, ads, footers, and formatting details.

2. **Be comprehensive yet concise**: Include all critical facts, data, conclusions, and actionable insights that someone needs to understand what the content is about and why it matters. Prioritize information that directly serves the page's main purpose.

3. **Retain essential specifics**: Include important numbers, dates, names, statistics, and concrete details when they're central to understanding the content. Omit minor details that don't contribute to the main message.

4. **Write in clear, flowing prose**: Present the information as a readable narrative summary rather than trying to preserve the original page structure or format. Focus on helping the reader quickly grasp what the content covers and its key takeaways.

5. **Cover the full scope efficiently**: Ensure your summary addresses all major topics and themes from the page, but present them in the most efficient way possible to give a complete picture without unnecessary length.

Your goal is to create a summary that someone can read in place of the original page and walk away with a solid understanding of what the content is about, its main points, and why it's relevant - all while being much more concise than the source material.`;

        const requestBody = {
            contents: [
                {
                    role: "user",
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            systemInstruction: {
                parts: [
                    {
                        text: systemInstructionSummarize
                    }
                ]
            },
            generationConfig: {
                thinkingConfig: {
                    thinkingBudget: 0
                }
            }
        };

        try {
            const response = await fetch(`${this.baseUrl}/${this.model}:generateContent?key=${this.apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Gemini API error (${response.status}): ${errorText}`);
            }

            const result = await response.json();
            
            // Extract the generated text from the response
            if (result.candidates && result.candidates.length > 0) {
                const candidate = result.candidates[0];
                if (candidate.content && candidate.content.parts && candidate.content.parts.length > 0) {
                    return candidate.content.parts[0].text;
                }
            }

            throw new Error('No content generated by Gemini API');

        } catch (error) {
            console.error('Gemini API summarization request failed:', error);
            throw error;
        }
    }

    isConfigured() {
        return !!this.apiKey;
    }
}

// Make it available globally
window.GeminiClient = GeminiClient;
